






代理模式
1) 代理类和委托类持有相同的接口，代理类主要负责为委托类预处理消息(前置处理)、过滤消息、传递消息、后置处理.
2) 代理类的对象和委托类的对象关联，代理类的对象并不真正实现服务，而是通过调用委托类的对象的方法，来提供特定的服务.
3) 按照代理的创建时期，代理类分为两种: 静态代理、动态代理.
静态代理: 由程序员创建或特定工具自动生成源代码，再对其进行编译，在程序运行之前，代理类的.class文件就已经存在了.

动态代理: 在程序运行时，运用反射机制动态创建而成.

4) 代理就是对委托对象进行一些列的前置后置、拦截过滤等处理，静态和动态区别就在于静态是预先存在的，而动态则是在
运行时用反射动态生成的.
静态代理: 代理类是预先固定生成的，在运行期间该类文件不会发生任何变化.
动态代理: 每一次调用，都会因为条件不同而生成不同的类文件，每次调用的类文件的内容都不完全相同，完全是根据运行时
的条件和环境动态生成的，另外生成的.class文件可能不再硬盘中存在，而是直接在内存中存在，一个调用结束之后，该.class
类会在内存中销毁.


jdk接口代理: ，若2者没有共同的接口，则无法实现基于jdk的代理.

静态代理比较简单，就是持有一个委托类的对象，然后实现共同的接口，然后在使用的时候，直接面向代理类即可，无需去使用
委托类，使用代理会更加简单，功能更加符合当前的需求.

动态代理 可以定制成 前置处理、后置处理，可以做成织入的方式.









