【项目信息】
项目名称 : pattern
中文名称 : 设计模式
项目版本 : version 1.0

主要技术 : 

项目描述 : 
设计模式是一套被反复使用、经过分类编目的、代码设计经验的总结.使用设计模式
是为了可重用代码、让代码更容易被他人理解、保证代码可靠性.设计模式使编程
真正地工程化，设计模式是软件工程的基石.
在项目中，合理运用设计模式可以完美解决许多问题，每个模式描述了一个不断重复
发生的问题，以及该问题的核心解决方案.
项目备注 : 

【项目规划】

1) 设计模式分类
(工厂抽象单例 构造原型)
创建型(5种): 工厂方法、抽象工厂、单例、构造者、原型

(适配装饰 代理外观 桥接组合享元)
结构型(7种): 适配器、装饰器、代理、外观、桥接、组合、享元

(策略模板 观察迭代 责任命令 备忘状态 访问中介解释)
行为型(11种): 策略、模板方法、观察者、迭代、责任链、命令、
备忘录、状态、访问者、中介者、解释器

并发型: 

线程池型:

2) 设计模式6大原则 (降低依赖，降低耦合)
开闭原则(Open Close Principle)
对扩展开放、对修改封闭.
在程序需要进行扩展时，不能去修改原有的代码，实现一个热插拔效果.
为了使程序的扩展性好，易于维护和升级. 要达到这种效果，需要使用接口
和抽象类.

里氏代换 (Liskov Substitution Principle)
任何基类可以出现的地方，子类一定能出现.里氏代换法则是继承复用的基石.
只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能正真
被复用，而衍生类也能够在基类的基础上增加新的行为.
里氏代换原则是实现抽象化的具体步骤的规范.

依赖倒转 (Dependence Inversion Principle)
依赖倒装是开闭原则的基础，基于接口的编程，依赖于抽象而不依赖于具体.

接口隔离 (Interface Segregation Principle)
使用多个隔离的接口，比使用单个接口更好.降低类之间的耦合度.

最少知道(迪米特 Demeter Principle)
一个实体尽量少的与其他实体之间发生作用，使得系统功能模块相对独立.

合成复用 (Composite Reuse Principle)
尽量使用合成、聚合的方式，而不是使用继承.

3)

4)

5)



























